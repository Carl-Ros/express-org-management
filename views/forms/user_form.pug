extends ../layout

block content
    h1 #{title}
    form(method='POST' action='')
        div.input-form
            label(for='givenName') First name:
            input(type='text', name='givenName' id='givenName' value=(user === undefined ? '' : user.givenName))

            label(for='surname') Last name:
            input(type='text', name='surname' id='surname' value=(user === undefined ? '' : user.surname))

            label(for='emailDomain') Email domain:
            input(type='text' for='emailDomain' id='domain')

            label(for='email') Email: 
            input(type='email', name='email' id='email' readonly)

            label(for='m365License') Microsoft license:
            select(type='select', name='m365License')    
                option(value='' selected) None
                each license in licenses
                    option(value=license.Service_Plan_Id) #{license.Product_Display_Name}

            div.query-container
                label(for="userSearch") Manager:
                input(type="text" id="userSearch" name="userSearch" placeholder="Enter manager name" ) 

            select.hidden(id='results' size=10)
            div.hidden(id='pagination')

            label(for="company") Company:
            select(type='select', name='company' id="company" required='true' )    
                each company in companies
                    option(value=company._id) #{company.name} (#{company.code})

            label(for="department") Department:
            select(type='select', name='department' id="department" required='true')    
            
            button(type='submit') Submit

    if errors
        ul
        for error in errors
            li!= error.msg

    script.
        async function generateEmail(){
            const givenName = document.getElementById('givenName').value;
            const surname = document.getElementById('surname').value;
            const domain = document.getElementById('domain').value;

            if(!givenName || !surname || !domain){
                document.getElementById('email').value = '';
                return;
            }

            response = await fetch(`/users/generateEmail?givenName=${encodeURIComponent(givenName)}&surname=${encodeURIComponent(surname)}&domain=${encodeURIComponent(domain)}`);
            if(response.ok){
                response.text().then((val) => document.getElementById('email').value = val)
            }
        }

        const mailGeneratingComponents = [
            document.getElementById('givenName'),
            document.getElementById('surname'),
            document.getElementById('domain'),
        ];

        function debounce(func, timer, timeout){
            clearTimeout(timer);
            return setTimeout(func, timeout);
        }

        let mailDebounceTimer;
        for(component of mailGeneratingComponents){
            component.addEventListener('input', () => {
                mailDebounceTimer = debounce(generateEmail, mailDebounceTimer, 2000);
            })
        }

    script.
        const resultsContainer = document.getElementById('results');
        const paginationContainer = document.getElementById('pagination');
        const itemsPerPage = 10;
        let currentPage = 1;

        function filterUsers() {
            const searchQuery = userSearchInput.value.trim();
            fetch(`/users/search?q=${encodeURIComponent(searchQuery)}`)
            .then(response => response.json())
            .then(data => {

                if(data.length > 0){
                    displayResults(data, currentPage);
                } else {
                    resultsContainer.classList.add('hidden');
                }
                if(data.length > 10){
                    displayPagination(data);
                } else {
                    paginationContainer.classList.add('hidden');
                }

            })
            .catch(error => {
                console.error(error);
            });
        }

        function displayResults(results, page) {
            resultsContainer.classList.remove('hidden');
            resultsContainer.innerHTML = '';
            const startIndex = (page - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;
            
            for (let i = startIndex; i < endIndex && i < results.length; i++) {
                const resultItem = document.createElement('option');
                resultItem.textContent = `${results[i].fullName} (${results[i].email})`;
                resultItem.value = results[i]._id;
                resultsContainer.appendChild(resultItem);
            }
            resultsContainer.setAttribute("size", results.length > 9 ? 10 : results.length + 1)
        }

        function displayPagination(results) {
            paginationContainer.classList.remove('hidden');
            paginationContainer.innerHTML = '';
            const totalPages = Math.ceil(results.length / itemsPerPage);
            
            for (let i = 1; i <= totalPages; i++) {
                const pageLink = document.createElement('span');
                pageLink.textContent = i;
                pageLink.classList.add('page-link');
                
                if (i === currentPage) {
                    pageLink.classList.add('active');
                }
                
                pageLink.addEventListener('click', () => {
                    currentPage = i;
                    displayResults(results, currentPage);
                    updatePaginationLinks();
                });
                
                paginationContainer.appendChild(pageLink);
            }
        }

        function updatePaginationLinks() {
            const pageLinks = paginationContainer.querySelectorAll('.page-link');
            
            pageLinks.forEach((link, index) => {
                if (index + 1 === currentPage) {
                    link.classList.add('active');
                } else {
                    link.classList.remove('active');
                }
            });
        }

        const userSearchInput = document.getElementById('userSearch');
        let managerDebounceTimer;
            userSearchInput.addEventListener('keyup', () => {
            clearTimeout(managerDebounceTimer);
            if(userSearchInput.value.length > 2){
                managerDebounceTimer = setTimeout(filterUsers, 300);
            }
        });


    script.
        const companySelect = document.getElementById('company');
        const departmentSelect = document.getElementById('department');
        const companies = !{JSON.stringify(companies)};

        function populateDepartmentOptions(companyId) {
            departmentSelect.innerHTML = '';
            const company = companies.find(({ _id }) => _id === companyId);

            if(company.departments === undefined || company.departments.length === 0){
                const option = document.createElement('option');
                option.textContent = 'None';
                departmentSelect.appendChild(option);
                departmentSelect.selected(option);
                option.selected = true;
            } else {
                for(const department of company.departments){
                    const option = document.createElement('option');
                    option.value = department._id;
                    option.textContent = department.name;
                    departmentSelect.appendChild(option);
                }
            }
        }
         
        document.addEventListener('DOMContentLoaded', () => {
            populateDepartmentOptions(companySelect.value);
        });

        companySelect.addEventListener('change', () => {
            populateDepartmentOptions(companySelect.value);
        });

